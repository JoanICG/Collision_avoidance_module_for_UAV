#include <Arduino.h>
#include "mpu6050_sensor.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include <vl53l0x_manager.h>  // Asegúrate de incluir la librería correcta para el sensor VL53L0X

// Variables globales
const int PRINT_INTERVAL = 50;  // Intervalo de impresión en ms
static const char* TAG = "MPU6050_APP";

// Handles para FreeRTOS
TaskHandle_t sensorTaskHandle = NULL;
TaskHandle_t displayTaskHandle = NULL;
SemaphoreHandle_t sensorDataSemaphore = NULL;


// Función de manejo de interrupción definida en el main
void IRAM_ATTR mpuInterruptHandler() {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    
    // Notificar a la tarea del sensor que hay nuevos datos disponibles
    if (sensorTaskHandle != NULL) {
        vTaskNotifyGiveFromISR(sensorTaskHandle, &xHigherPriorityTaskWoken);
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}

// Tarea para procesar datos del sensor
void sensorTask(void *parameter) {
    TickType_t xLastWakeTime = xTaskGetTickCount();
    
    // El bucle principal de la tarea
    for (;;) {
        // Esperar por notificación desde la ISR (o timeout para modo polling)
        uint32_t ulNotifiedValue = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(20));
        
        // Verificar si hay nuevos datos (por interrupción o polling)
        if (mpuSensor.hasNewData() || ulNotifiedValue > 0) {
            // Procesar datos del sensor
            float pitch = mpuSensor.getPitch();
            float roll = mpuSensor.getRoll();
            float yaw = mpuSensor.getYaw();
            
            // Opcional: si necesitas hacer cálculos adicionales con los valores, hazlos aquí
            
            // Indicar que hay nuevos datos disponibles para mostrar
            xSemaphoreGive(sensorDataSemaphore);
        }
    }
}

// Tarea para mostrar/comunicar datos
void displayTask(void *parameter) {
    TickType_t xLastWakeTime = xTaskGetTickCount();
    
    for (;;) {
        // Esperar a que haya nuevos datos disponibles (o timeout)
        if (xSemaphoreTake(sensorDataSemaphore, pdMS_TO_TICKS(100)) == pdTRUE) {
            // Obtener datos actuales
            float pitch = mpuSensor.getPitch();
            float roll = mpuSensor.getRoll();
            float yaw = mpuSensor.getYaw();
            
            // Mostrar resultados
            Serial.printf("Orientación - Pitch: %5.2f°, Roll: %5.2f°, Yaw: %5.2f°\n", 
                         pitch, roll, yaw);
        }
        
        // Dar tiempo a otras tareas
        vTaskDelay(pdMS_TO_TICKS(PRINT_INTERVAL));
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    Serial.println("Iniciando sistema de orientación con MPU6050 (FreeRTOS)...");
    
    // Crear semáforo para sincronización de datos
    sensorDataSemaphore = xSemaphoreCreateBinary();
    if (sensorDataSemaphore == NULL) {
        Serial.println("ERROR: No se pudo crear el semáforo!");
        while (1) { delay(100); }
    }
    
    // Inicializar el sensor MPU6050 con nuestra función de interrupción
    if (!mpuSensor.begin(true, true, mpuInterruptHandler)) {
        Serial.println("ERROR: No se pudo inicializar el MPU6050!");
        while (1) { delay(100); }
    }
    
    // Crear tareas
    xTaskCreatePinnedToCore(
        sensorTask,        // Función de tarea
        "SensorTask",      // Nombre
        4096,              // Stack size (bytes)
        NULL,              // Parámetros
        3,                 // Prioridad (mayor número = mayor prioridad)
        &sensorTaskHandle, // Handle
        0                  // Core (0 o 1)
    );
    
    xTaskCreatePinnedToCore(
        displayTask,
        "DisplayTask",
        4096,
        NULL,
        1,                 // Menor prioridad que la tarea del sensor
        &displayTaskHandle,
        1                  // Core diferente para mejor rendimiento
    );
    
    Serial.println("Sistema FreeRTOS iniciado!");
}

void loop() {
    // En sistemas FreeRTOS, el loop() puede quedar vacío
    // o usarse para tareas no críticas de baja prioridad
    delay(1000);
}